// assert works
{
  var a = 10;
  assert a == 10;
}

// basic expressions
{
  var a = 3 + 4 * 5;
  assert a == 23;
}

// assignment and scoping
{
  var a = 10;
  {
    var b = 20;
    assert a + b == 30;

    a = 30;
    assert a + b == 50;
  }
}

// if/else with logical operators
{
  var a = 10;
  var b = 20;
  if (a == 10 and b == 20) {
    assert true;
  }

  if (a == 5 or b == 6) {
    assert false;
  } else {
    assert true;
  }
}

// while loop
{
  var idx = 0;
  var accum = 0;
  while (idx < 10) {
    accum = accum + idx;
    idx = idx + 1;
  }
  assert accum == 45;
}

// for loop
{
  var accum = 0;
  for (var i = 0; i < 10; i = i + 1) {
    accum = accum + i;
  }
  assert accum == 45;
}

// functions
fun fib(n) {
  if (n == 0 or n == 1) {
    return n;
  }
  return fib(n - 1) + fib(n - 2);
}

fun outer() {
  var i = 10;
  fun inner() {
    return i + 10;
  }
  return inner;
}

{
  var time = clock();
  assert time > 0;

  assert fib(10) == 55;
  assert outer()() == 20;
}

// closures working correctly with scopes
{
  var a = 10;
  {
    fun foo() {
      return a;
    }
    assert foo() == 10;
    var a = 20;
    assert foo() == 10;
  }
}

// classes
{
  class Person {
    init(first, second) {
      this.first = first;
      this.second = second;
    }

    full_name() {
      return this.first + " " + this.second;
    }
  }

  var person = Person("John", "Doe");
  assert person.first = "John";
  assert person.second = "Doe";
  assert person.full_name() == "John Doe";

  person.activity = "playing";
  assert person.activity == "playing";
}

// inheritance
{
  class Base {
    sum() { return 1; }
    product() { return 10; }
  }

  class Derived < Base {
    sum() { return super.sum() + 1; }
  }

  var d = Derived();
  assert d.sum() == 2;
  assert d.product() == 10;
}

print "All passed!";
